local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "XYLO HUB",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "XYLO HUB",
   LoadingSubtitle = "FREE",
   ShowText = "XYLO HUB", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "c5uVTcHtzJ", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "XYLO KEY",
      Subtitle = "Key System",
      Note = "KEY IN https://discord.gg/c5uVTcHtzJ", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"SKIBIDISIGMA123"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("üè† HOME", nil) -- Title, Image
local Section = MainTab:CreateSection("Main")

Rayfield:Notify({
   Title = "Execution succesed!",
   Content = "Wow, you SIGMA executed the script",
   Duration = 6.5,
   Image = nil,
})

local Button = MainTab:CreateButton({
   Name = "+WalkSpeed",
   Callback = function()
   local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HRP = Character:WaitForChild("HumanoidRootPart")
local Humanoid = Character:WaitForChild("Humanoid")

local SpeedhackEnabled = true
local SpeedMultiplier = 1.3 -- default 

local function getMoveDirection()
    local moveDir = Humanoid.MoveDirection
    if moveDir.Magnitude > 0 then
        return moveDir.Unit
    end
    return nil
end

-- // T to toggle \\ --
UIS.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.T then
        SpeedhackEnabled = not SpeedhackEnabled
        speedToggle:Set(SpeedhackEnabled)
    end
end)

-- // Movement \\ --
RunService.RenderStepped:Connect(function(dt)
    if SpeedhackEnabled and Humanoid.MoveDirection.Magnitude > 0 then
        local moveDir = getMoveDirection()
        if moveDir then
            local speed = Humanoid.WalkSpeed * (SpeedMultiplier - 1)
            HRP.CFrame = HRP.CFrame + (moveDir * speed * dt)
        end
    end
end)

-- Auto-Fix on Respawn
LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
    HRP = char:WaitForChild("HumanoidRootPart")
    Humanoid = char:WaitForChild("Humanoid")
end)

   end,
})

local Button = MainTab:CreateButton({
   Name = "Reset Walkspeed",
   Callback = function()
   local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")

-- üèÉ‚Äç‚ôÇÔ∏è Reset WalkSpeed auf Roblox-Standard
Humanoid.WalkSpeed = 16


   end,
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local ESPEnabled = false
local ESPs = {}

local function createESP(player)
    if player == LocalPlayer then return end
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end

    local rootPart = player.Character.HumanoidRootPart

    -- BillboardGui f√ºr Name + Box
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "ESPBillboard"
    billboardGui.Adornee = rootPart
    billboardGui.Size = UDim2.new(0, 100, 0, 100)
    billboardGui.StudsOffset = Vector3.new(0, 3, 0)
    billboardGui.AlwaysOnTop = true
    billboardGui.Parent = rootPart

    -- Gr√ºnes Viereck (Frame) als Box
    local boxFrame = Instance.new("Frame", billboardGui)
    boxFrame.Name = "ESPBox"
    boxFrame.Size = UDim2.new(1, 0, 1, 0)
    boxFrame.BackgroundTransparency = 1
    boxFrame.BorderColor3 = Color3.new(0, 1, 0)
    boxFrame.BorderSizePixel = 2

    -- TextLabel f√ºr Name (optional)
    local nameLabel = Instance.new("TextLabel", billboardGui)
    nameLabel.Size = UDim2.new(1, 0, 0, 20)
    nameLabel.Position = UDim2.new(0, 0, 1, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.TextColor3 = Color3.new(1, 1, 1)
    nameLabel.TextStrokeTransparency = 0
    nameLabel.TextScaled = true
    nameLabel.Font = Enum.Font.SourceSansBold
    nameLabel.Text = player.Name

    ESPs[player] = {Billboard = billboardGui, Box = boxFrame, NameLabel = nameLabel}
end

local function removeESP(player)
    if ESPs[player] then
        if ESPs[player].Billboard then
            ESPs[player].Billboard:Destroy()
        end
        ESPs[player] = nil
    end
end

local lineFrames = {}

local function updateLines()
    -- Linien von LocalPlayer zu anderen Spielern mit Frames im ScreenGui
    local screenGui = LocalPlayer:FindFirstChild("PlayerGui"):FindFirstChild("ESP_Lines")
    if not screenGui then
        screenGui = Instance.new("ScreenGui")
        screenGui.Name = "ESP_Lines"
        screenGui.ResetOnSpawn = false
        screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
    end

    -- Clean alte Lines
    for _, line in pairs(lineFrames) do
        line:Destroy()
    end
    lineFrames = {}

    for player, espData in pairs(ESPs) do
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local playerPos, onScreenPlayer = Camera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position)
            local localPos, onScreenLocal = Camera:WorldToViewportPoint(LocalPlayer.Character.HumanoidRootPart.Position)
            if onScreenPlayer and onScreenLocal then
                local line = Instance.new("Frame")
                line.BackgroundColor3 = Color3.new(0, 1, 0)
                line.BorderSizePixel = 0
                line.AnchorPoint = Vector2.new(0.5, 0.5)
                line.Parent = screenGui

                local dist = (player.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                local thickness = math.clamp(10 / dist, 1, 4) -- Linienbreite dynamisch, optional

                -- Position und Rotation berechnen
                local from = Vector2.new(localPos.X, localPos.Y)
                local to = Vector2.new(playerPos.X, playerPos.Y)
                local direction = (to - from)
                local length = direction.Magnitude
                local angle = math.deg(math.atan2(direction.Y, direction.X))

                line.Size = UDim2.new(0, length, 0, thickness)
                line.Position = UDim2.new(0, from.X, 0, from.Y)
                line.Rotation = angle
                table.insert(lineFrames, line)
            end
        end
    end
end

local function enableESP()
    for _, player in pairs(Players:GetPlayers()) do
        createESP(player)
        player.CharacterAdded:Connect(function()
            createESP(player)
        end)
        player.CharacterRemoving:Connect(function()
            removeESP(player)
        end)
    end

    Players.PlayerAdded:Connect(function(player)
        createESP(player)
        player.CharacterAdded:Connect(function()
            createESP(player)
        end)
        player.CharacterRemoving:Connect(function()
            removeESP(player)
        end)
    end)

    RunService:BindToRenderStep("ESP_Update", Enum.RenderPriority.Camera.Value + 1, function()
        if ESPEnabled then
            updateLines()
        end
    end)
end

local function disableESP()
    for player, espData in pairs(ESPs) do
        removeESP(player)
    end
    ESPs = {}

    local screenGui = LocalPlayer:FindFirstChild("PlayerGui"):FindFirstChild("ESP_Lines")
    if screenGui then
        screenGui:Destroy()
    end
    RunService:UnbindFromRenderStep("ESP_Update")
end

-- Dein Toggle:
local Toggle = Tab:CreateToggle({
   Name = "ESP Toggle",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
       ESPEnabled = Value
       if ESPEnabled then
           enableESP()
       else
           disableESP()
       end
   end,
})



local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local aimbotConnection

local function getClosestTarget()
    local closestPlayer = nil
    local shortestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local headPos, onScreen = Camera:WorldToViewportPoint(player.Character.Head.Position)
            if onScreen then
                local mousePos = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
                local targetPos = Vector2.new(headPos.X, headPos.Y)
                local distance = (mousePos - targetPos).Magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

local function startAimbot()
    if aimbotConnection then aimbotConnection:Disconnect() end
    aimbotConnection = RunService.RenderStepped:Connect(function()
        local target = getClosestTarget()
        if target and target.Character and target.Character:FindFirstChild("Head") then
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, target.Character.Head.Position)
        end
    end)
end

local function stopAimbot()
    if aimbotConnection then
        aimbotConnection:Disconnect()
        aimbotConnection = nil
    end
end

local Toggle = MainTab:CreateToggle({
   Name = "Aimbot",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
       if Value then
           startAimbot()
       else
           stopAimbot()
       end
   end,
})



